package bitbucket

import (
	"context"

	"github.com/ktrysmt/go-bitbucket"
	"github.com/turbot/steampipe-plugin-sdk/grpc/proto"
	"github.com/turbot/steampipe-plugin-sdk/plugin"
	"github.com/turbot/steampipe-plugin-sdk/plugin/transform"
)

func tableBitbucketRepository(_ context.Context) *plugin.Table {
	return &plugin.Table{
		Name:        "bitbucket_repository",
		Description: "BitBucket repositorie that you are associated with. BitBucket repositories contain all of your project's files and each file's revision history.",
		List: &plugin.ListConfig{
			KeyColumns: plugin.SingleColumn("full_name"),
			Hydrate:    tableBitbucketRepositoryList,
		},
		Columns: bitBucketRepositoryColumns(),
	}
}

func tableBitbucketRepositoryList(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	repoFullName := d.KeyColumnQuals["full_name"].GetStringValue()
	owner, repoName := parseRepoFullName(repoFullName)

	client := connect(ctx, d)
	opts := &bitbucket.RepositoryOptions{
		Owner:    owner,
		RepoSlug: repoName,
	}

	repo, err := client.Repositories.Repository.Get(opts)
	if err != nil {
		return nil, err
	}

	if repo != nil {
		d.StreamListItem(ctx, repo)
	}

	return nil, nil
}

func bitBucketRepositoryColumns() []*plugin.Column {
	return []*plugin.Column{
		{
			Name:        "name",
			Description: "The name of repository.",
			Type:        proto.ColumnType_STRING,
		},
		{
			Name:        "uuid",
			Description: "The repository's immutable id. This can be used as a substitute for the slug segment in URLs. Doing this guarantees your URLs will survive renaming of the repository by its owner, or even transfer of the repository to a different user.",
			Type:        proto.ColumnType_STRING,
			Transform:   transform.FromField("Uuid"),
		},
		{
			Name:        "slug",
			Description: "A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL.",
			Type:        proto.ColumnType_STRING,
		},
		{
			Name:        "full_name",
			Description: "The concatenation of the repository owner's username and the slugified name, e.g. \"turbot/steampipe-plugin-bitbucket\". This is the same string used in Bitbucket URLs.",
			Type:        proto.ColumnType_STRING,
			Transform:   transform.FromField("Full_name"),
		},
		{
			Name:        "description",
			Description: "Description of the repository.",
			Type:        proto.ColumnType_STRING,
		},
		{
			Name:        "fork_policy",
			Description: "Controls the rules for forking this repository. \"allow_forks\": unrestricted forking, \"no_public_forks\": restrict forking to private forks (forks cannot be made public later) and \"no_forks\": deny all forking",
			Type:        proto.ColumnType_STRING,
		},
		{
			Name:        "language",
			Description: "The type of markup language the raw content is to be interpreted in.",
			Type:        proto.ColumnType_STRING,
		},
		{
			Name:        "is_private",
			Description: "Indicates whether the repository is publicly accessible, or whether it is private to the team and consequently only visible to team members.",
			Type:        proto.ColumnType_BOOL,
			Transform:   transform.FromField("Is_private"),
		},
		{
			Name:        "has_issues",
			Description: "To initialize or disable the new repo's issue tracker",
			Type:        proto.ColumnType_STRING,
			Transform:   transform.FromField("Has_issues"),
		},
		{
			Name:        "owner_account_id",
			Description: "Jira account id of the owner.",
			Type:        proto.ColumnType_STRING,
			Transform:   transform.FromField("Owner.account_id"),
		},
		{
			Name:        "owner_display_name",
			Description: "Display name of the owner the repository.",
			Type:        proto.ColumnType_STRING,
			Transform:   transform.FromField("Owner.display_name"),
		},
		{
			Name:        "owner_type",
			Description: "Type of the owner of the repository. Can be a user or team.",
			Type:        proto.ColumnType_STRING,
			Transform:   transform.FromField("Owner.type"),
		},
		{
			Name:        "owner_uuid",
			Description: "Bitbucket UUID of the owner.",
			Type:        proto.ColumnType_STRING,
			Transform:   transform.FromField("Owner.uuid"),
		},
		{
			Name:        "project_name",
			Description: "Name of the project this repository belongs to.",
			Type:        proto.ColumnType_STRING,
			Transform:   transform.FromField("Project.Name"),
		},
		{
			Name:        "project_key",
			Description: "Key of the project this repository belongs to.",
			Type:        proto.ColumnType_STRING,
			Transform:   transform.FromField("Project.Key"),
		},
		{
			Name:        "project_uuid",
			Description: "UUID of the project this repository belongs to.",
			Type:        proto.ColumnType_STRING,
			Transform:   transform.FromField("Project.Uuid"),
		},
		{
			Name:        "self_link",
			Description: "Self link to this repository.",
			Type:        proto.ColumnType_STRING,
			Transform:   transform.FromField("Links.self.href"),
		},
		{
			Name:        "mainbranch",
			Description: "Details of the main branch of the repository.",
			Type:        proto.ColumnType_JSON,
		},

		// Standard columns
		{
			Name:        "title",
			Description: ColumnDescriptionTitle,
			Type:        proto.ColumnType_STRING,
			Transform:   transform.FromField("Name"),
		},
	}
}
